// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  username          String?
  coursesCreated    Course[]  @relation("coursesCreatedBy")
  coursesBought     Course[]  @relation("CourseBoughtBy")
  chaptersCompleted Chapter[]
  coursesCompleted  Course[]
  revenueMade       Int       @default(0)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id          String    @id @default(uuid())
  name        String
  banner      String
  creator     User      @relation("coursesCreatedBy", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId   String
  boughtBy    User[]    @relation("CourseBoughtBy")
  completedBy User[]
  price       Int
  chapters    Chapter[]
}

model Chapter {
  id          String @id @default(uuid())
  name        String
  description String
  videoUrl    String
  course      Course @relation(references: [id], fields: [courseId], onDelete: Cascade)
  courseId    String
  CompletedBy User[]
}
