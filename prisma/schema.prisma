// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                String         @id @default(cuid())
  name              String?
  email             String?        @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  coursesCreated    Course[]       @relation(name: "courses created")
  chaptersCompleted Chapter[]
  coursesBought     Course[]
  reviewsWrote      CourseReview[]
  commentsWrote     Comment[]
}

model Course {
  id             String         @id @default(uuid())
  name           String
  description    String?
  price          Int            @default(0)
  image          String
  chapters       Chapter[]
  creator        User           @relation(name: "courses created", fields: [creatorId], references: [id])
  creatorId      String
  courseBoughtBy User[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  reviews        CourseReview[]
}

model CourseReview {
  id        String @id @default(uuid())
  text      String
  ratings   Int    @default(0)
  course    Course @relation(fields: [courseId], references: [id])
  courseId  String
  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String
}

model Chapter {
  id                 Int       @id @default(autoincrement())
  name               String
  description        String?
  image              String
  video              String
  courseId           String
  course             Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  chapterCompletedBy User[]
  comments           Comment[]
}

model Comment {
  id        Int     @id @default(autoincrement())
  chapter   Chapter @relation(fields: [chapterId], references: [id])
  text      String
  chapterId Int
  creator   User?   @relation(fields: [creatorId], references: [id])
  creatorId String?
}
